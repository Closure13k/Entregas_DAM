package form;

import java.util.Enumeration;
import java.util.Objects;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import worker.Worker;
import worker.WorkerLevel;


import worker.Location;
import worker.Worker.WorkerException;

/**
 *
 * @author AaronFM
 */
public class form extends javax.swing.JFrame {

    /**
     * Creates new form form
     */
    public form() {
        initComponents();
        trWorkers.setModel(model);
        tableModel = (DefaultTableModel) tblWorkers.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        trWorkers = new javax.swing.JTree();
        jPanel2 = new javax.swing.JPanel();
        lblLocation = new javax.swing.JLabel();
        txtLocation = new javax.swing.JTextField();
        btnLocationAdd = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        lblSurname = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtSurname = new javax.swing.JTextField();
        btnWorkerAdd = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        lblLocationCmb = new javax.swing.JLabel();
        cmbLocation = new javax.swing.JComboBox<>();
        btnWorkerShow = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblWorkers = new javax.swing.JTable();

        jButton2.setText("jButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(null);

        jScrollPane1.setViewportView(trWorkers);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(20, 20, 330, 430);

        lblLocation.setText("Localidad");

        txtLocation.setText("Nar√≥n");

        btnLocationAdd.setText("Alta localidad");
        btnLocationAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLocationAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblLocation)
                .addGap(18, 18, 18)
                .addComponent(txtLocation, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnLocationAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLocation)
                    .addComponent(txtLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLocationAdd))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2);
        jPanel2.setBounds(370, 20, 420, 50);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Nuevo empleado"));

        lblName.setText("Nombre");

        lblSurname.setText("Apellidos");

        txtName.setText("Pepo");

        txtSurname.setText("Martinez");

        btnWorkerAdd.setText("Alta");
        btnWorkerAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWorkerAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSurname)
                    .addComponent(lblName))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                    .addComponent(txtSurname))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(btnWorkerAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnWorkerAdd))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSurname)
                    .addComponent(txtSurname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(370, 80, 420, 120);

        lblLocationCmb.setText("Localidad");

        btnWorkerShow.setText("Trabajadores");
        btnWorkerShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWorkerShowActionPerformed(evt);
            }
        });

        tblWorkers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Apellido", "Cargo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblWorkers);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lblLocationCmb)
                        .addGap(18, 18, 18)
                        .addComponent(cmbLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnWorkerShow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(37, 37, 37))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLocationCmb)
                    .addComponent(cmbLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnWorkerShow))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel3);
        jPanel3.setBounds(370, 200, 420, 250);

        setSize(new java.awt.Dimension(819, 504));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnLocationAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLocationAddActionPerformed
        try {
            Location location = new Location(txtLocation.getText());
            addLocationToCombo(location);
            addLocationToTree(location);
        } catch (Location.LocationException ex) {
            formController.errorMessage(this, ex.getMessage());
        }
    }//GEN-LAST:event_btnLocationAddActionPerformed

    private void btnWorkerAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWorkerAddActionPerformed
        try {
            Worker worker = generateWorker();
            addWorkerToTree(worker);
        } catch (Worker.WorkerException ex) {
            formController.errorMessage(this, ex.getMessage());
        }
    }//GEN-LAST:event_btnWorkerAddActionPerformed

    private void btnWorkerShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWorkerShowActionPerformed
        loadTableFromTree();
    }//GEN-LAST:event_btnWorkerShowActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new form().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLocationAdd;
    private javax.swing.JButton btnWorkerAdd;
    private javax.swing.JButton btnWorkerShow;
    private javax.swing.JComboBox<Location> cmbLocation;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblLocation;
    private javax.swing.JLabel lblLocationCmb;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblSurname;
    private javax.swing.JTable tblWorkers;
    private javax.swing.JTree trWorkers;
    private javax.swing.JTextField txtLocation;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtSurname;
    // End of variables declaration//GEN-END:variables

    DefaultMutableTreeNode root = new DefaultMutableTreeNode("CUADRILLAS");
    DefaultTreeModel model = new DefaultTreeModel(root);
    DefaultTableModel tableModel;

    private void addLocationToCombo(Location location) throws Location.LocationException {
        if (locationsComboContains(location)) {
            throw new Location.LocationException("La localidad ya est√° registrada.");
        }
        cmbLocation.addItem(location);
    }

    private boolean locationsComboContains(Location location) {
        int itemCount = cmbLocation.getItemCount();
        for (int i = 0; i < itemCount; i++) {
            if (cmbLocation.getItemAt(i).getName().equalsIgnoreCase(location.getName())) {
                return true;
            }
        }
        return false;
    }

    private void addLocationToTree(Location location) throws Location.LocationException {
        if (locationsTreeContains(location)) {
            throw new Location.LocationException("La localidad ya existe.");
        }
        DefaultMutableTreeNode child = new DefaultMutableTreeNode(location);
        model.insertNodeInto(child, root, root.getChildCount());
        TreePath treePath = new TreePath(child.getPath());
        trWorkers.scrollPathToVisible(treePath);
        trWorkers.setSelectionPath(treePath);
//        model.reload();

    }

    private boolean locationsTreeContains(Location location) {
        Enumeration<TreeNode> children = root.children();
        while (children.hasMoreElements()) {
            TreeNode nextElement = children.nextElement();
            if (nextElement.toString().equalsIgnoreCase(location.toString())) {
                return true;
            }
        }
        return false;
    }

    public Worker generateWorker() throws Worker.WorkerException {
        try {
            String name = txtName.getText();
            String surname = txtSurname.getText();
            WorkerLevel level;
            if (name.isBlank()) {
                throw new Worker.WorkerException("El nombre est√° en blanco.");
            }
            if (surname.isBlank()) {
                throw new Worker.WorkerException("El apellido est√° en blanco.");
            }
            level = selectFromTree();
            return new Worker(name, surname, level);
        } catch (Worker.WorkerException ex) {
            throw new Worker.WorkerException("Error al seleccionar en el arbol: " + ex.getMessage());
        }
    }

    private WorkerLevel selectFromTree() throws Worker.WorkerException {
        TreePath selectionPath = trWorkers.getSelectionPath();
        if (Objects.isNull(selectionPath)) {
            throw new Worker.WorkerException("No hay nada seleccionado.");
        }
        DefaultMutableTreeNode lastPathComponent = (DefaultMutableTreeNode) selectionPath.getLastPathComponent();
        Object userObject = lastPathComponent.getUserObject();
        WorkerLevel level = null;
        if (userObject instanceof String) {
            throw new Worker.WorkerException("No se puede registrar en este nodo.");
        }
        if (userObject instanceof Location) {
            level = WorkerLevel.BOSS;
        } else if (userObject instanceof Worker worker) {
            switch (worker.getLevel()) {
                case BOSS ->
                    level = WorkerLevel.FIRST_OFFICER;

                case FIRST_OFFICER ->
                    level = WorkerLevel.SECOND_OFFICER;

                case SECOND_OFFICER -> {
                    throw new Worker.WorkerException("No se puede registrar por debajo de 2¬∫ grado.");
                }
            }
        }
        return level;
    }

    private void addWorkerToTree(Worker worker) throws WorkerException {
        DefaultMutableTreeNode lastPathComponent = (DefaultMutableTreeNode) trWorkers.getSelectionPath().getLastPathComponent();
        if (treeContainsNode(lastPathComponent, worker)) {
            throw new WorkerException("Ya registrado en el arbol.");
        }
        DefaultMutableTreeNode child = new DefaultMutableTreeNode(worker);
        model.insertNodeInto(child, lastPathComponent, lastPathComponent.getChildCount());
        TreePath treePath = new TreePath(child.getPath());
        trWorkers.scrollPathToVisible(treePath);
        trWorkers.setSelectionPath(treePath);
    }

    private void loadTableFromTree() {
        Location selectedLocation = (Location) cmbLocation.getSelectedItem();
        if (Objects.nonNull(selectedLocation)) {
            for (int i = 0; i < root.getChildCount(); i++) {
                DefaultMutableTreeNode locChild = (DefaultMutableTreeNode) root.getChildAt(i);
                Object userObject = locChild.getUserObject();
                if (userObject instanceof Location location) {
                    if (location.equals(selectedLocation)) {
                        loadTableFromLocationNode(locChild);
                    }
                }
            }

        }
    }

    private void loadTableFromLocationNode(DefaultMutableTreeNode node) {
        Enumeration<TreeNode> children = node.children();
        while (children.hasMoreElements()) {
            DefaultMutableTreeNode nextElement = (DefaultMutableTreeNode) children.nextElement();
            Object userObject = nextElement.getUserObject();
            if (userObject instanceof Worker worker) {
                
                tableModel.addRow(new Object[]{worker.getName(), worker.getSurname(), worker.translateLevel()});
                if (nextElement.getChildCount() > 0) {
                    loadTableFromLocationNode(nextElement);
                }
            }

        }

    }

    private boolean treeContainsNode(DefaultMutableTreeNode parent, Worker candidate) {
        for (int i = 0; i < parent.getChildCount(); i++) {
            DefaultMutableTreeNode currentChild = (DefaultMutableTreeNode) parent.getChildAt(i);
            Worker currentWorker = (Worker) currentChild.getUserObject();
            if (currentWorker.toString().equals(candidate.toString())) {
                return true;
            }
        }
        return false;
    }
}
